%--------------------------------------------------------
% Rules for graphs created with UDPipe (Default French)
%
% % AS April 25
%--------------------------------------------------------

%--------------------------------------------------------
% 1. OBJECT CLITICS
%--------------------------------------------------------

% ======= direct object person 3
% coding attribute=clitic_acc value=obj3 node=PRO addlemma=V
pattern {
    V [upos=/AUX|VERB/];
    PRO [form=/^[lL].*$/, PronType="Prs"];
    V -[obj]-> PRO;
}

% ======= direct object person 1-2
% coding attribute=clitic_acc value=obj12 node=PRO addlemma=V
pattern {
    V [upos=/AUX|VERB/];
    PRO [form=/^[mtvnMTVN].*$/, PronType="Prs"];
    V -[obj]-> PRO;
}

% ======= indirect object person 3
% coding attribute=clitic_dat value=iobj3 node=PRO addlemma=V
pattern {
    V [upos=/AUX|VERB/];
    PRO [form=/^[lL].*$/, PronType="Prs"];
    V -[iobj]-> PRO;
}

% ======= indirect object person 1-2
% coding attribute=clitic_dat value=iobj12 node=PRO addlemma=V
pattern {
    V [upos=/AUX|VERB/];
    PRO [form=/^[mtvnMTVN].*$/, PronType="Prs"];
    V -[iobj]-> PRO;
}

% ======= y
% coding attribute=clitic_adv value=loc node=PRO addlemma=V
pattern {
    V [upos=/AUX|VERB/];
    PRO [form=/^[yY]$/, PronType="Prs"];
    V -[expl:comp|obl:mod/]-> PRO;
}

%--------------------------------------------------------
% 2. REFLEXIVE CLITICS
%    usually parses reflexives as  expl:pv  or  obj
%--------------------------------------------------------

% ======= reflexive person 3
% coding attribute=refl value=3 node=PRO addlemma=V
pattern {
    V [upos=/AUX|VERB/];
    PRO [form=/^[sS].*$/, Reflex="Yes"];
    V -[re".*"]-> PRO;
}

% ======= reflexive person 1-2
% coding attribute=refl value=12 node=PRO addlemma=V
pattern {
    V [upos=/AUX|VERB/];
    PRO [form=/^[mtvnMTVN].*$/, Reflex="Yes"];
    V -[re".*"]-> PRO;
}

%--------------------------------------------------------
% 3. POTENTIAL DATIVE ARGUMENTS (à-PPs)
%    à-PPs are parsed as arguments (obl:arg) or modifiers (obl:mod)
%--------------------------------------------------------

% ======= à PP
% coding attribute=a_pp value=arg node=P addlemma=N
pattern {
    V [upos=/AUX|VERB/];
    P [form=/^(à|au|aux|À|Au|Aux)/];
    N [upos=/N|PROPN/];
    V -[obl:arg]-> N;
    N -[case]-> P;
}

% ======= à PP
% coding attribute=a_pp value=mod node=P addlemma=N
pattern {
    V [upos=/AUX|VERB/];
    P [form=/^(à|au|aux)/];
    N [upos=/N|PROPN/];
    V -[obl:mod]-> N;
    N -[case]-> P;
}

