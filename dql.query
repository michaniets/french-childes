%--------------------------------------------------------
% Rules for graphs created with UDPipe / model French GSD
%
% Infinitival complements with
% 1. modal verbs
% 2. any verb
%
% AS Nov 24
%--------------------------------------------------------

% 1. MODAL VERBS

% ======= infinitive
% coding attribute=code_modal value=inf node=MOD addlemma=V
pattern {
    MOD [lemma=/(pouvoir|vouloir|devoir|falloir|savoir)/];
    V [upos=/AUX|VERB/, VerbForm="Inf"];
    MOD -[re"xcomp"]-> V;
}
% ======= complement clause
% coding attribute=code_modal value=clause node=MOD addlemma=V
pattern {
    MOD [lemma=/(pouvoir|vouloir|devoir|falloir|savoir)/];
    V [upos="VERB"];
    MOD -[ccomp]-> V;
    V -[mark]-> *;  % any conjunction
}
% ======= lexical object
% coding attribute=code_modal value=obj_lex node=MOD add=N
pattern {
    MOD [lemma=/(pouvoir|vouloir|devoir|falloir|savoir)/];
    MOD -[obj]-> N;
}

% ======= clitic object
% coding attribute=code_modal value=obj_clit node=MOD addlemma=PRO
pattern {
    MOD [lemma=/(pouvoir|vouloir|devoir|falloir|savoir)/];
    PRO [form=/^(le|la|les|l')$/, PronType="Prs"];
    MOD -[obj]-> PRO;
}

% 2. ALL VERBS

% ======= bare infinitive complements
% coding attribute=code_verb value=inf_bare node=V addlemma=INF
pattern {
    V [upos=/AUX|VERB/];
    INF [upos=/AUX|VERB/, VerbForm="Inf"];
    V -[xcomp]-> INF;
    V << INF;
    V.lemma <> INF.lemma;   % avoid repetitions like "couper couper!"
}
without {
    INF -[mark]-> *;  % exclude de/à + Inf
}

% ======= prepositional infinitive complements
% coding attribute=code_verb value=inf_prep node=V addlemma=INF
pattern {
    V [upos=/AUX|VERB/];
    INF [upos=/AUX|VERB/, VerbForm="Inf"];
    V -[xcomp]-> INF;
    INF -[mark]-> *;
    V << INF;
}

% 3. NEGATION

% ======= negation high with bare infinitive complements
% coding attribute=code_neg value=inf_high node=V addlemma=INF
pattern {
    V [upos=/AUX|VERB/];
    INF [upos=/AUX|VERB/, VerbForm="Inf"];
    V -[xcomp]-> INF;
    V << INF;
    V.lemma <> INF.lemma;   % avoid repetitions like "couper couper!"
    NEG [form=/n.*/];
    V -[advmod]-> NEG;
    NEG << V;
}
without {
    INF -[mark]-> *;  % exclude de/à + Inf
}

% ======= negation low with bare infinitive complements
% coding attribute=code_neg value=inf_low node=V addlemma=INF
pattern {
    V [upos=/AUX|VERB/];
    INF [upos=/AUX|VERB/, VerbForm="Inf"];
    V -[xcomp]-> INF;
    V << INF;
    V.lemma <> INF.lemma;   % avoid repetitions like "couper couper!"
    NEG [form=/n.*/];
    INF -[advmod]-> NEG;
    NEG << INF;
}
without {
    INF -[mark]-> *;  % exclude de/à + Inf
}




