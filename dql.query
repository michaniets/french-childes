%--------------------------------------------------------
% Rules for structures based on graph (UDPipe French GSD)
%--------------------------------------------------------

% 1. MODAL VERBS

% ======= infinitive
% coding attribute=code_modal value=inf node=MOD addlemma=V
pattern {
    MOD [lemma=/(pouvoir|vouloir|devoir|falloir|savoir)/];
    V [upos=/AUX|VERB/, VerbForm="Inf"];
    MOD -[re"xcomp"]-> V;
}
% ======= complement clause
% coding attribute=code_modal value=clause node=MOD addlemma=V
pattern {
    MOD [lemma=/(pouvoir|vouloir|devoir|falloir|savoir)/];
    V [upos="VERB"];
    MOD -[ccomp]-> V;
    V -[mark]-> *;  % any conjunction
}
% ======= lexical object
% coding attribute=code_modal value=obj_lex node=MOD add=N
pattern {
    MOD [lemma=/(pouvoir|vouloir|devoir|falloir|savoir)/];
    MOD -[obj]-> N;
}

% ======= clitic object
% coding attribute=code_modal value=obj_clit node=MOD addlemma=PRO
pattern {
    MOD [lemma=/(pouvoir|vouloir|devoir|falloir|savoir)/];
    PRO [form=/^(le|la|les|l')$/, PronType="Prs"];
    MOD -[obj]-> PRO;
}

% 2. ALL VERBS

% ======= bare infinitive complements
% coding attribute=code_verb value=inf_bare node=V addlemma=INF
pattern {
    V [upos=/AUX|VERB/];
    INF [upos=/AUX|VERB/, VerbForm="Inf"];
    V -[xcomp]-> INF;
}
without {
    INF -[mark]-> *;  % exclude de/Ã  + Inf
}

% ======= bare infinitive complements
% coding attribute=code_verb value=inf_prep node=V addlemma=INF
pattern {
    V [upos=/AUX|VERB/];
    INF [upos=/AUX|VERB/, VerbForm="Inf"];
    V -[xcomp]-> INF;
    INF -[mark]-> *;
}


